// Âº∫Âà∂Âú®Âè≥‰∏ãËßíÂàõÂª∫AIËØ≠Èü≥ÊåâÈíÆ
// ÂÆåÂÖ®Áã¨Á´ãÔºå‰∏ç‰æùËµñ‰ªª‰ΩïÁé∞ÊúâÊåâÈíÆ

(function () {
    'use strict';

    console.log('üéØ Âº∫Âà∂ÂàõÂª∫Âè≥‰∏ãËßíAIËØ≠Èü≥ÊåâÈíÆ...');

    // ÂΩªÂ∫ïÊ∏ÖÁêÜÊâÄÊúâÂèØËÉΩÁöÑÊóßÂÖÉÁ¥†
    const cleanupSelectors = [
        '#ai-voice-button',
        '#enhanced-voice-btn',
        '#voice-status-indicator',
        '#ai-voice-status',
        '#ai-voice-styles',
        '#voice-enhancer-styles',
        '.ai-voice-button',
        '.enhanced-voice-btn'
    ];

    cleanupSelectors.forEach(selector => {
        document.querySelectorAll(selector).forEach(el => {
            el.remove();
            console.log(`üóëÔ∏è Ê∏ÖÁêÜ: ${selector}`);
        });
    });

    // ÁßªÈô§ÊâÄÊúâÂ¢ûÂº∫Ê†áËØÜ
    document.querySelectorAll('button').forEach(btn => {
        if (btn.getAttribute('data-enhanced')) {
            btn.removeAttribute('data-enhanced');
            btn.title = btn.title.replace(' (Â¢ûÂº∫Áâà)', '');
            console.log('üßπ ÁßªÈô§Â¢ûÂº∫Ê†áËØÜ');
        }
    });

    // ÈÖçÁΩÆ
    const API_URL = 'http://localhost:8889';

    // ÂÖ®Â±ÄÂèòÈáè
    let isRecording = false;
    let mediaRecorder = null;
    let audioChunks = [];

    // ÂàõÂª∫Ê†∑Âºè
    function createStyles() {
        const style = document.createElement('style');
        style.id = 'force-voice-styles';
        style.textContent = `
            #force-voice-btn {
                position: fixed !important;
                bottom: 120px !important;
                right: 30px !important;
                width: 70px !important;
                height: 70px !important;
                border-radius: 50% !important;
                background: linear-gradient(135deg, #8B5CF6, #7C3AED) !important;
                border: 3px solid white !important;
                color: white !important;
                cursor: pointer !important;
                z-index: 99999 !important;
                box-shadow: 0 4px 20px rgba(139, 92, 246, 0.5) !important;
                transition: all 0.3s ease !important;
                display: flex !important;
                flex-direction: column !important;
                align-items: center !important;
                justify-content: center !important;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
                font-size: 10px !important;
                font-weight: bold !important;
                text-align: center !important;
            }
            
            #force-voice-btn:hover {
                transform: scale(1.1) !important;
                box-shadow: 0 6px 25px rgba(139, 92, 246, 0.7) !important;
            }
            
            #force-voice-btn.recording {
                background: linear-gradient(135deg, #EF4444, #DC2626) !important;
                animation: voice-pulse 1s infinite !important;
            }
            
            #force-voice-status {
                position: fixed !important;
                top: 20px !important;
                right: 20px !important;
                padding: 12px 16px !important;
                border-radius: 25px !important;
                color: white !important;
                font-size: 14px !important;
                font-weight: 500 !important;
                z-index: 99998 !important;
                display: none !important;
                max-width: 300px !important;
                backdrop-filter: blur(10px) !important;
                box-shadow: 0 4px 15px rgba(0,0,0,0.3) !important;
            }
            
            #force-voice-status.success {
                background: rgba(34, 197, 94, 0.9) !important;
            }
            
            #force-voice-status.error {
                background: rgba(239, 68, 68, 0.9) !important;
            }
            
            #force-voice-status.recording {
                background: rgba(239, 68, 68, 0.9) !important;
                animation: voice-pulse 1s infinite !important;
            }
            
            #force-voice-status.processing {
                background: rgba(168, 85, 247, 0.9) !important;
            }
            
            @keyframes voice-pulse {
                0% { opacity: 1; transform: scale(1); }
                50% { opacity: 0.8; transform: scale(1.05); }
                100% { opacity: 1; transform: scale(1); }
            }
        `;
        document.head.appendChild(style);
        console.log('‚úÖ Ê†∑ÂºèÂ∑≤ÂàõÂª∫');
    }

    // ÂàõÂª∫ÊåâÈíÆ
    function createButton() {
        const button = document.createElement('button');
        button.id = 'force-voice-btn';
        button.innerHTML = `
            üé§<br>
            AIËØ≠Èü≥
        `;
        button.title = 'Êåâ‰ΩèÂΩïÈü≥ÔºåÊùæÂºÄÂèëÈÄÅ';

        // Á°Æ‰øùÊ∑ªÂä†Âà∞bodyÁöÑÊúÄÂêé
        document.body.appendChild(button);

        // ÁªëÂÆö‰∫ã‰ª∂
        button.addEventListener('mousedown', startRecording);
        button.addEventListener('mouseup', stopRecording);
        button.addEventListener('mouseleave', () => {
            if (isRecording) stopRecording();
        });

        // Ëß¶Êë∏‰∫ã‰ª∂
        button.addEventListener('touchstart', (e) => {
            e.preventDefault();
            startRecording();
        });
        button.addEventListener('touchend', (e) => {
            e.preventDefault();
            stopRecording();
        });

        console.log('‚úÖ ÊåâÈíÆÂ∑≤ÂàõÂª∫Âú®Âè≥‰∏ãËßí');
        return button;
    }

    // ÂàõÂª∫Áä∂ÊÄÅÊåáÁ§∫Âô®
    function createStatus() {
        const status = document.createElement('div');
        status.id = 'force-voice-status';
        document.body.appendChild(status);
        console.log('‚úÖ Áä∂ÊÄÅÊåáÁ§∫Âô®Â∑≤ÂàõÂª∫');
    }

    // ÊòæÁ§∫Áä∂ÊÄÅ
    function showStatus(message, type = 'info', duration = 3000) {
        const status = document.getElementById('force-voice-status');
        if (!status) return;

        status.textContent = message;
        status.className = '';
        status.classList.add(type);
        status.style.display = 'block';

        setTimeout(() => {
            status.style.display = 'none';
        }, duration);
    }

    // ÂºÄÂßãÂΩïÈü≥
    async function startRecording() {
        if (isRecording) return;

        console.log('üé§ ÂºÄÂßãÂΩïÈü≥...');
        showStatus('üé§ ÂΩïÈü≥‰∏≠...', 'recording');

        try {
            const stream = await navigator.mediaDevices.getUserMedia({
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    autoGainControl: true
                }
            });

            mediaRecorder = new MediaRecorder(stream);
            audioChunks = [];
            isRecording = true;

            const button = document.getElementById('force-voice-btn');
            button.classList.add('recording');

            mediaRecorder.ondataavailable = (event) => {
                audioChunks.push(event.data);
            };

            mediaRecorder.onstop = () => {
                stream.getTracks().forEach(track => track.stop());
                processAudio();
            };

            mediaRecorder.start();

        } catch (error) {
            console.error('ÂΩïÈü≥Â§±Ë¥•:', error);
            showStatus('‚ùå Êó†Ê≥ïËÆøÈóÆÈ∫¶ÂÖãÈ£é', 'error');
            isRecording = false;
        }
    }

    // ÂÅúÊ≠¢ÂΩïÈü≥
    function stopRecording() {
        if (!isRecording) return;

        console.log('‚èπÔ∏è ÂÅúÊ≠¢ÂΩïÈü≥...');
        showStatus('üîÑ Â§ÑÁêÜ‰∏≠...', 'processing');

        mediaRecorder.stop();
        isRecording = false;

        const button = document.getElementById('force-voice-btn');
        button.classList.remove('recording');
    }

    // Â§ÑÁêÜÈü≥È¢ë
    async function processAudio() {
        try {
            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });

            const formData = new FormData();
            formData.append('audio_file', audioBlob, 'recording.wav');

            const response = await fetch(`${API_URL}/transcribe`, {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error(`ËΩ¨ÂΩïÂ§±Ë¥•: ${response.status}`);
            }

            const result = await response.json();
            const text = result.transcribed_text;

            if (!text || text.trim() === '') {
                showStatus('‚ùå Êú™Ê£ÄÊµãÂà∞ËØ≠Èü≥', 'error');
                return;
            }

            console.log('‚úÖ ËΩ¨ÂΩïÁªìÊûú:', text);
            showStatus(`‚úÖ "${text}"`, 'success');

            insertText(text);

        } catch (error) {
            console.error('Â§ÑÁêÜÂ§±Ë¥•:', error);
            showStatus(`‚ùå ${error.message}`, 'error');
        }
    }

    // Ê£ÄÊü•ÊòØÂê¶‰∏∫ËØ≠Èü≥Êåá‰ª§
    function isVoiceCommand(text) {
        const commands = [
            'ÊâìÂºÄ', 'ÂêØÂä®', 'ËøêË°å', 'ÊâßË°å', 'ÂÖ≥Èó≠', 'ÂÅúÊ≠¢',
            'open', 'start', 'run', 'execute', 'close', 'stop',
            'ËÆ°ÁÆóÂô®', 'calculator', 'ËÆ∞‰∫ãÊú¨', 'notepad',
            'ÊµèËßàÂô®', 'browser', 'Êñá‰ª∂ÁÆ°ÁêÜÂô®', 'explorer'
        ];

        return commands.some(cmd => text.toLowerCase().includes(cmd.toLowerCase()));
    }

    // Â§ÑÁêÜËØ≠Èü≥Êåá‰ª§
    async function handleVoiceCommand(text) {
        try {
            const response = await fetch(`${API_URL}/process`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    text: text,
                    execute_commands: true
                })
            });

            if (!response.ok) {
                throw new Error(`Êåá‰ª§Â§ÑÁêÜÂ§±Ë¥•: ${response.status}`);
            }

            const result = await response.json();

            if (result.command_executed) {
                showStatus(`‚úÖ Â∑≤ÊâßË°å: ${text}`, 'success', 5000);
                console.log('Êåá‰ª§ÊâßË°åÁªìÊûú:', result.command_result);

                // ÊòæÁ§∫ÊâßË°åÁªìÊûú
                if (result.command_result) {
                    setTimeout(() => {
                        showStatus(`ÁªìÊûú: ${result.command_result}`, 'info', 8000);
                    }, 2000);
                }
            } else {
                // Â¶ÇÊûú‰∏çÊòØÊåá‰ª§ÔºåÂΩì‰ΩúÊôÆÈÄöÊñáÊú¨Â§ÑÁêÜ
                insertTextToChat(text);
            }

        } catch (error) {
            console.error('Êåá‰ª§Â§ÑÁêÜÂ§±Ë¥•:', error);
            showStatus('‚ö†Ô∏è Êåá‰ª§Â§ÑÁêÜÂ§±Ë¥•Ôºå‰Ωú‰∏∫ÊñáÊú¨ÊèíÂÖ•', 'error');
            insertTextToChat(text);
        }
    }

    // ÊèíÂÖ•ÊñáÊú¨Âà∞ËÅäÂ§©Ê°Ü
    function insertTextToChat(text) {
        const selectors = [
            'textarea[placeholder*="Send a message"]',
            'textarea[placeholder*="message"]',
            'textarea[placeholder*="Send"]',
            'div[contenteditable="true"]',
            'textarea[rows]',
            'textarea',
            'input[type="text"]'
        ];

        let input = null;

        // Êõ¥ÂÖ®Èù¢ÁöÑÊü•ÊâæÊñπÂºè
        for (const selector of selectors) {
            const elements = document.querySelectorAll(selector);
            for (const el of elements) {
                // Ê£ÄÊü•ÂÖÉÁ¥†ÊòØÂê¶ÂèØËßÅ‰∏îÂèØÁºñËæë
                const rect = el.getBoundingClientRect();
                if (rect.width > 0 && rect.height > 0 && !el.disabled && !el.readOnly) {
                    input = el;
                    break;
                }
            }
            if (input) break;
        }

        // Â¶ÇÊûúËøòÊòØÊâæ‰∏çÂà∞ÔºåÂ∞ùËØïÊúÄÂêé‰∏Ä‰∏™textarea
        if (!input) {
            const textareas = Array.from(document.querySelectorAll('textarea'));
            input = textareas[textareas.length - 1];
        }

        if (input) {
            console.log('üéØ ÊâæÂà∞ËæìÂÖ•Ê°Ü:', input);

            // Ê∏ÖÁ©∫Âπ∂ËÆæÁΩÆÁÑ¶ÁÇπ
            input.focus();
            input.value = '';

            // ËÆæÁΩÆÊñáÊú¨
            input.value = text;

            // Â¶ÇÊûúÊòØcontenteditableÂÖÉÁ¥†
            if (input.contentEditable === 'true') {
                input.textContent = text;
                input.innerHTML = text;
            }

            // Ëß¶ÂèëÂ§öÁßç‰∫ã‰ª∂Á°Æ‰øùÊ°ÜÊû∂Ê£ÄÊµãÂà∞ÂèòÂåñ
            const events = [
                new Event('focus', { bubbles: true }),
                new Event('input', { bubbles: true }),
                new Event('change', { bubbles: true }),
                new Event('keyup', { bubbles: true }),
                new Event('keydown', { bubbles: true }),
                new InputEvent('input', { bubbles: true, inputType: 'insertText', data: text })
            ];

            events.forEach(event => {
                try {
                    input.dispatchEvent(event);
                } catch (e) {
                    console.warn('‰∫ã‰ª∂Ëß¶ÂèëÂ§±Ë¥•:', e);
                }
            });

            // React/VueÂÖºÂÆπÊÄßÂ§ÑÁêÜ
            setTimeout(() => {
                try {
                    const nativeInputValueSetter = Object.getOwnPropertyDescriptor(
                        window.HTMLTextAreaElement.prototype, "value"
                    )?.set;

                    if (nativeInputValueSetter) {
                        nativeInputValueSetter.call(input, text);
                        input.dispatchEvent(new Event('input', { bubbles: true }));
                    }
                } catch (e) {
                    console.warn('React/VueÂÖºÂÆπÊÄßÂ§ÑÁêÜÂ§±Ë¥•:', e);
                }
            }, 100);

            showStatus('‚úÖ ÊñáÊú¨Â∑≤ÊèíÂÖ•', 'success');

            // ËØ¢ÈóÆÊòØÂê¶ÂèëÈÄÅ
            setTimeout(() => {
                if (confirm('üöÄ ÂèëÈÄÅÊ∂àÊÅØÔºü')) {
                    sendMessage();
                }
            }, 800);

        } else {
            console.warn('‚ö†Ô∏è Êú™ÊâæÂà∞ËæìÂÖ•Ê°Ü');
            showStatus(`ËΩ¨ÂΩïÁªìÊûú: "${text}"`, 'info', 10000);

            // Ë∞ÉËØï‰ø°ÊÅØ
            console.log('È°µÈù¢‰∏≠ÁöÑÊâÄÊúâÂèØËÉΩËæìÂÖ•ÂÖÉÁ¥†:');
            document.querySelectorAll('textarea, input, [contenteditable]').forEach((el, i) => {
                console.log(`${i}: ${el.tagName} - ${el.placeholder || el.getAttribute('aria-label') || 'no label'}`);
            });
        }
    }

    // ÂèëÈÄÅÊ∂àÊÅØ
    function sendMessage() {
        const sendSelectors = [
            'button[type="submit"]',
            'button[aria-label*="Send"]',
            'button[aria-label*="ÂèëÈÄÅ"]',
            'button[title*="Send"]',
            'button[title*="ÂèëÈÄÅ"]',
            '[data-testid="send-button"]',
            '.send-button'
        ];

        for (const selector of sendSelectors) {
            const button = document.querySelector(selector);
            if (button && button.offsetParent !== null && !button.disabled) {
                button.click();
                showStatus('üì§ Ê∂àÊÅØÂ∑≤ÂèëÈÄÅ', 'success');
                return;
            }
        }

        showStatus('‚ö†Ô∏è ËØ∑ÊâãÂä®ÁÇπÂáªÂèëÈÄÅ', 'error');
    }

    // ‰∏ªË¶ÅÁöÑÊñáÊú¨Â§ÑÁêÜÂáΩÊï∞
    function insertText(text) {
        // È¶ñÂÖàÊ£ÄÊü•ÊòØÂê¶‰∏∫ËØ≠Èü≥Êåá‰ª§
        if (isVoiceCommand(text)) {
            console.log('üéØ Ê£ÄÊµãÂà∞ËØ≠Èü≥Êåá‰ª§:', text);
            showStatus('üîß ÊâßË°åÊåá‰ª§‰∏≠...', 'processing');
            handleVoiceCommand(text);
        } else {
            console.log('üí¨ ÊôÆÈÄöÊñáÊú¨Ê∂àÊÅØ:', text);
            insertTextToChat(text);
        }
    }

    // ÊµãËØïAPIËøûÊé•
    async function testAPI() {
        try {
            const response = await fetch(`${API_URL}/health`);
            if (response.ok) {
                showStatus('‚úÖ APIÂ∑≤ËøûÊé•', 'success');
            } else {
                showStatus('‚ö†Ô∏è APIÂºÇÂ∏∏', 'error');
            }
        } catch (error) {
            showStatus('‚ùå APIÊú™ËøûÊé•', 'error');
        }
    }

    // ÂàùÂßãÂåñ
    function init() {
        createStyles();
        createButton();
        createStatus();
        testAPI();

        console.log('üéâ Âº∫Âà∂Âè≥‰∏ãËßíAIËØ≠Èü≥ÊåâÈíÆÂ∑≤Â∞±Áª™ÔºÅ');
        console.log('üìç ‰ΩçÁΩÆ: Âè≥‰∏ãËßíÔºåË∑ùÁ¶ªÂ∫ïÈÉ®120pxÔºåË∑ùÁ¶ªÂè≥Ëæπ30px');
        console.log('üé§ ‰ΩøÁî®: Êåâ‰ΩèÊåâÈíÆÂΩïÈü≥ÔºåÊùæÂºÄÂèëÈÄÅ');
    }

    // Âª∂ËøüÂàùÂßãÂåñÔºåÁ°Æ‰øùÈ°µÈù¢ÂÆåÂÖ®Âä†ËΩΩ
    setTimeout(init, 1000);

})();